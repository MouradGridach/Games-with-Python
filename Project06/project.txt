# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        global in_play
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))

        if in_play == True:
            if pos == (80, 200):
                canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [pos[0] + CARD_BACK_CENTER[0], pos[1] + CARD_BACK_CENTER[1]], CARD_BACK_SIZE)
            else:
                canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        else:
            canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.hand_cards = []

    def __str__(self):
        ans = ""
        for i in range(len(self.hand_cards)):
            ans += str(self.hand_cards[i]) + " "
        return ans

    def add_card(self, card):
        self.hand_cards.append(card)

    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        val = str(self.hand_cards)
        val = ""
        for i in self.hand_cards:
            val+= str(i.get_rank())
        if val.find("A") == -1:
            res = 0
            for i in self.hand_cards:
                res += VALUES[str(i.get_rank())]
            return res
        else:
            res = 0
            for i in self.hand_cards:
                res += VALUES[str(i.get_rank())]
            
            if (res + 10) <= 21:
                return (res + 10)
            else:
                return res
   
    def draw(self, canvas, pos):
        for i in self.hand_cards:
            i.draw(canvas, pos)
            pos = (pos[0] + CARD_SIZE[0] + 20, pos[1])
        # draw a hand on the canvas, use the draw method for cards
 
        
# define deck class 
class Deck:
    def __init__(self):
        self.deck = []
        for i in range(len(SUITS)):
            for j in range(len(RANKS)):
                card = Card(SUITS[i], RANKS[j])
                self.deck.append(card)

    def shuffle(self):
        # add cards back to deck and shuffle
        random.shuffle(self.deck)

    def deal_card(self):
        return self.deck.pop()
        # deal a card object from the deck
    
    def __str__(self):
        ans = ""
        for i in range(len(self.deck)):
            ans+= str(self.deck[i]) + " "
        return ans

#initialize
def init():
    global player_hand, dealer_hand
    deal()
    
    
#define event handlers for buttons
def deal():
    global outcome, in_play, player_hand, dealer_hand, deck_play, score

    # your code goes here
    if in_play == True:
        outcome = "You lose"
        score = score - 1
        
    deck_play = Deck()
    deck_play.shuffle()
    
    player_hand = Hand()
    dealer_hand = Hand()
    player_hand.add_card(deck_play.deal_card())
    dealer_hand.add_card(deck_play.deal_card())
    player_hand.add_card(deck_play.deal_card())
    dealer_hand.add_card(deck_play.deal_card())
    
    outcome = "Hit or stand?"
    in_play = True

def hit():
    global player_hand, deck_play, in_play, outcome, score
 
    # if the hand is in play, hit the player
    if in_play == True:
        player_hand.add_card(card = deck_play.deal_card())
    
    if player_hand.get_value() > 21:
        outcome = "You lose"
        in_play = False
        score = score - 1
    
    # if busted, assign a message to outcome, update in_play and score
       
def stand():
    global player_hand, dealer_hand, deck_play, outcome, in_play, score
    
    if player_hand.get_value() > 21:
        outcome = "You lose"
        score = score - 1
        in_play = False
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play == True:
        while dealer_hand.get_value() < 17:
            dealer_hand.add_card(deck_play.deal_card())

    # assign a message to outcome, update in_play and score
    outcome = "New deal?"
    in_play = False
    if dealer_hand.get_value() > 21:
        outcome = "You win"
        score += 1
    else:
        if dealer_hand.get_value() > player_hand.get_value():
            outcome = "You lose"
            score = score - 1
        else:
            outcome = "You win"
            score += 1
    
# draw handler    
def draw(canvas):
    global player_hand, dealer_hand, score, outcome
    # test to make sure that card.draw works, replace with your code below
    canvas.draw_text("Blackjack", (100, 100), 42, "Red")
    canvas.draw_text("Score "+ str(score), (400, 100), 26, "Black")
    canvas.draw_text("Dealer", (80, 180), 26, "Black")
    dealer_hand.draw(canvas, (80, 200))
    
    canvas.draw_text("Player", (80, 380), 26, "Black")
    canvas.draw_text(outcome, (180, 380), 26, "Black")
    player_hand.draw(canvas, (80, 400))
    
    
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")


#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

init()

# get things rolling
frame.start()


# remember to review the gradic rubric